classDiagram
%% агрегация композици перепутал
%% не сохраняется упорядоченность фигур
%% при клонировании что делать с id? shape не должен хранить id
    direction TB

    namespace gfx {
        class ICanvas {
            <<interface>>
            + MoveTo(x: double, y: double)
            + SetColor(color: Color)
            + LineTo(x: double, y: double)
            + DrawEpilse(cx: double, cy: double, rx: double, ry: double)
            + DrawText(left: double, top: double, fontSize: double, text: string)
        }

        class SFMLCanvas
        class MockCanvas

        class Color {
            +Value() uint32t
            +ToString() std::string

            -color uint32t
        }
    }

    namespace shapes {
        class Bounds {
            +position Position
            +size Size
        }

        class Position {
            +x double
            +y double
        }

        class Size {
            +w double
            +h double
        }

        class IShapeModel {
            <<interface>>
            +GetBounds() Bounds
            +Move(double dx, double dy) void
            +Draw(ICanvas& canvas, Color fillColor) void
            +GetShapeName() std::string
            +GetModelParameters() std::string
        }

        class RectangleModel {
            +RectangleModel(Bounds bounds)
        }

        class TriangleModel {
            +TriangleModel(vertex1 double, vertex2 double, vertex3 double)

            -m_vertex1 double
            -m_vertex2 double
            -m_vertex3 double
        }

        class TextModel {
            +TextModel(Position p, double size, std::string content)

            -m_content std::string
            -m_p Position
            -m_size double
        }

        class LineModel {
            +LineModel(Position p1, Position p2)

            -m_p1 Position
            -m_p2 Position
        }

        class CircleModel {
            +CircleModel(Position center, double r)

            -m_center Position
            -m_r double
        }


        class Picture {
            +Picture(ICanvas& canvas)
            +DrawPicture() void
            +DrawShape(std::string id) void
            +AddShape(std::string id, Color color, IShapeModel model) void
            +ChangeShape(std::string id, IShapeModel model) void
            +ChangeColor(std::string id, Color color) void
            +List() void 
            +DeleteShape(std::string id) void
            +MovePicture(double dx, double dy) void
            +MoveShape(std::string id, double dx, double dy) void
            +GetBounds() Bounds

            -m_bounds Bounds

            -m_canvas ICanvas*
            -m_shapes std::unordered_map<std::string, IShape>
        }

        class IShape {
            <<interface>>
            +Draw(ICanvas canvas) void
            +SetFillColor(Color color) void
            +ChangeShape(IShapeModel model) void
            +Move(double dx, double dy) void
            +GetBounds() Bounds
            +GetId() std::string

            +ToString() std::string
        }

        class Shape {
            -m_shapeModel IShapeModel
            -m_id std::string
            -m_fillColor Color
        }


        class ShapesCommandLine {
            +Start(Picture& picture, ICommandListener& listener) void

            -ExecuteCommand(Picture& picture)
        }
    }

    namespace commands {

        class ICommandListener {
            <<interface>>
            +GetLine() std::string
        }

        class StdCommandListener {
            +GetLine() std::string
        }

        class CommandExecutor {
            +Execute(Picture& picture, std::string commandLine)

            -ParseCommandName(std::string command) std::string
            -ExecuteCommand() void
        }

        class ICommand {
            <<interface>>
            +Execute(Picture& picture, std::string argumentsLine)
        }

        class AddShapeCommand

        class DrawPicture

        class DrawShape

        class AddShape

        class ChangeShape

        class ChangeColor

        class List

        class DeleteShape

        class MovePicture

        class MoveShape

        class IShapeParser {
            <<interface>>
            +Parse(std::string shapeParameters) IShapeModel
        }

        class RectangleParser 

        class CircleParser 

        class TextParser 

        class LineParser 

        class TriangeParser 

        class ShapeParserFactory {
            +GetParserByType(std::string type)$ IShapeParser
        }

        class CommandFactory {
            +GetCommand(std::string commandLine)$ ICommand
        }

    }

    %% Commands

    ShapesCommandLine o--> ICommandListener
    ShapesCommandLine o--> Picture
    ShapesCommandLine *--> CommandExecutor

    CommandExecutor --> CommandFactory

    ICommandListener <|.. StdCommandListener

    CommandFactory o--> ICommand
    ICommand <|.. AddShapeCommand
    ICommand <|.. DrawPicture
    ICommand <|.. DrawShape
    ICommand <|.. AddShape
    ICommand <|.. ChangeShape
    ICommand <|.. ChangeColor
    ICommand <|.. List
    ICommand <|.. DeleteShape
    ICommand <|.. MovePicture
    ICommand <|.. MoveShape

    IShapeParser <|.. RectangleParser
    IShapeParser <|.. CircleParser
    IShapeParser <|.. TextParser
    IShapeParser <|.. LineParser
    IShapeParser <|.. TriangeParser

    MoveShape --> ShapeParserFactory

    ShapeParserFactory o--> IShapeParser

    %% Shapes

    IShapeModel <|.. RectangleModel
    IShapeModel <|.. TriangleModel
    IShapeModel <|.. CircleModel
    IShapeModel <|.. TextModel
    IShapeModel <|.. LineModel

    IShape <|.. Shape

    Shape --> Bounds
    Shape --> Size
    Shape --> Position
    Shape --> Color

    Shape o--> IShapeModel

    Picture o--> IShape
    Picture o--> ICanvas


    %% GFX

    ICanvas <|.. MockCanvas
    ICanvas <|.. SFMLCanvas



