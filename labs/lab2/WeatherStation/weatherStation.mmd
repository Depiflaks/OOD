classDiagram
  direction TB

  class SubscribeType {
    <<enum>>
    +TEMPERAURE_CHANGE
    +HUMIDITY_CHANGE
    +PRESSURE_CHANGE
  }

  class IObserver~T~ {
    <<interface>>
    +Update(const IObservable~T~& observable) void = 0
  }

  class HospitalSensorsInfo {
    +OutsideWeatherInfo m_outsideWeather;
    +int m_patientPulse;
  }

  HospitalSensorsInfo *--> OutsideWeatherInfo

  class AbstractObserver~T~ {
    +AbstractObserver(const IObservable~T~& observable)
    #ChangeObservable(const IObservable~T~& observable) void
    #GetObservable() voidPtr
    #ChangeObservable(const IObservable~T~& observable) void
    #CheckSameObservable(const IObservable~T~& observable) bool
    -void* m_observable
  }

  class MonoAbstractObserver~T~ {
    +MonoObserver(const IObservable~T~& observable)
    +ChangeObservable(const IObservable~T~& observable) void
    #UpdateObserver(const IObservable~T~& observable) void
    -Update(const IObservable~T~& observable) void
  }

  class DuoAbstractObserver~T1, T2~ {
    +DuoAbstractObserver(const IObservable~T1~& first, const IObservable~T2~& second)
    +ChangeObservables(const IObservable~T1~& first, const IObservable~T2~& second) void
    #UpdateFirst(const IObservable~T1~& observable) void = 0
    #UpdateSecond(const IObservable~T2~& observable) void = 0
    -Update(const IObservable~T~& observable) void
  }

  class DuoTemperatureStatsDisplay~T1, T2~ {
    -UpdateFirst(const IObservable~T1~& observable) void
    -UpdateSecond(const IObservable~T2~& observable) void
  }

  class MonoAbstractStatsObserver~ContextType, ValueType~ {
    #UpdateStatistics(ValueType value) void
    #PrintValues(std::string name) void
    -ValueType m_minValue
    -ValueType m_maxValue
    -ValueType m_accValue
  }

  class MonoAbstractStatsObserver~HospitalSensorsInfo, WindInfo~ {
  }

  class WeatherDisplay {
    -Update(const IObservable~T~& observable) void
  }

  class PressureStatsDisplay {
    -Update(const IObservable~T~& observable) void
  }

  class HumStatsDisplay {
    -Update(const IObservable~T~& observable) void
  }

  class TemperatureStatsDisplay {
    -Update(const IObservable~T~& observable) void
  }

  IObserver ..|> AbstractObserver
  AbstractObserver --|> MonoAbstractObserver
  AbstractObserver --|> DuoAbstractObserver : T1
  AbstractObserver --|> DuoAbstractObserver : T2
  MonoAbstractObserver --|> MonoAbstractStatsObserver
  MonoAbstractObserver --|> WeatherDisplay
  DuoAbstractObserver --|> DuoTemperatureStatsDisplay
  MonoAbstractStatsObserver --|> PressureStatsDisplay
  MonoAbstractStatsObserver --|> HumStatsDisplay
  MonoAbstractStatsObserver --|> TemperatureStatsDisplay

  AbstractObserver o--> IObservable

  class IObservable {
    <<interface>>

    %% TODO: добавить поддержку типа
    +Subscribe(SubscribeType type, const std::weak_ptr~IObserver~& observer, int priority = 0) void
    +Unsubscribe(SubscribeType type, const std::weak_ptr~IObserver~& observer) void
    +GetData() T
  }

  class ISubject {
    <<interface>>
    +Notify(SubscribeType type) void
  }

  class Subject {
    -m_observers std::set~std::weak_ptr~IObserver~~
  }

  class HospitalSensorsData {
    +MeasurementsChanged() void
    +GetData() WeatherInfo

    +UpdateTemperature(double temp) void
    +UpdateHumidity(double humidity) void
    +UpdatePressure(double pressure) void
    +UpdateWind(double windSpeed, double windDirection) void
    +UpdatePulse(int patientPulse) void

    +SetMeasurements(double temp, double humidity, double pressure, double windSpeed, double windDirection, int patientPulse) void

    -OutsideWeatherInfo m_outsideWeather
    -int m_patientPulse
  }

  class InsideTemperatureData {
    +GetData() InsideTemperatureInfo
    void SetMeasurements(double temperature)
    -double m_temperature
  }

  IObservable ..|> ISubject
  ISubject ..|> Subject
  Subject ..|> SubscribeType : use
  Subject --|> HospitalSensorsData
  Subject --|> InsideTemperatureData

  Subject o--> IObserver
  HospitalSensorsData --> HospitalSensorsInfo : creates
  InsideTemperatureData --> InsideTemperatureInfo : creates

  class InsideTemperatureInfo {
    +double m_temperature
  }

  class OutsideWeatherInfo {
    +double m_temperature = 0;
    +double m_humidity = 0;
    +double m_pressure = 0;
    +WindInfo m_wind;
  }

  class WindInfo {
    +double m_speed
    +double m_direction
  }

  OutsideWeatherInfo *--> WindInfo

