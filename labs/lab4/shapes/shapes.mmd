classDiagram

    namespace performer {
        class IDesigner {
            <<interface>>
            + CreateDraft(std::istream& strm) PictureDraft
        }

        class Designer {
            + CreateDraft(std::istream& strm) PictureDraft
        }

        class Client

        class Painter {
            + DrawPicture(PictureDraft draft, ICanvas canvas) void
        }
    }

    namespace shapes {

        class PictureDraft {
            + GetShapeCount() int
            + GetShape(index) Shape
            + AppendShape(Shape shape) void
            - std::map~int, Shape~ m_shapes
        }

        class Shape {
            + Draw(ICanvas canvas) void
            + GetColor() Color
        }

        class Rectangle {
            + Draw(ICanvas canvas) void
            + GetLeftTop() Point
            + GetRightBottom() Point
        }

        class Triangle {
            + Draw(canvas) void
            + GetVertex(1) Point
            + GetVertex(2) Point
            + GetVertex(3) Point
        }

        class Ellipse {
            + Draw(canvas) void
            + GetCenter() Point
            + GetHorizontalRadius() int
            + GetVerticalRadius() int
        }

        class RegularPolygon {
            + Draw(ICanvas canvas) void
            + GetVertexCount() int
            + GetCenter() Point
            + GetRadius() Point
        }

        class Point {
            + double x
            + double y
        }
    }

    namespace gfx {
        class Color {
            +Value() uint32t
            +ToString() std::string

            -color uint32t
        }

        class SFMLCanvas
        class MockCanvas

        class ICanvas {
            <<interface>>
            + MoveTo(double x, double y)
            + SetColor(color Color)
            + LineTo(double x, double y)
            + DrawEpilse(double cx, double cy, double rx, double ry)
            + DrawText(double left, double top, double fontSize, text string)
        }
    }



    namespace factory {
        class IShapeFactory {
            <<interface>>
            + CreateShape(std::string descr) Shape
        }

        class ShapeFactory {
        }
    }


    Shape <|-- Rectangle 
    Shape <|-- Triangle
    Shape <|-- Ellipse
    Shape <|-- RegularPolygon
    PictureDraft "1" *-- "0..*" Shape
    Designer ..> PictureDraft
    Painter ..> PictureDraft

    ICanvas <|.. SFMLCanvas
    ICanvas <|.. MockCanvas

    Painter ..> ICanvas
    Shape ..> ICanvas

    Client *--> ICanvas
    ICanvas ..> Color : use

    IShapeFactory <|.. ShapeFactory 
    IShapeFactory ..> Shape
    Designer *--> IShapeFactory

    IDesigner <|.. Designer
    Client ..> IDesigner
    Client ..> Painter

